global !p
def capscore(t):
	return '_'.join([ w.upper() for w in re.findall('[A-Z]+[a-z]*', t) ])

def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

# Normal javascript snippets
#
snippet imp "Import a lib" b
import $1 from '$2`!p snip.rv=lowerdash(t[1])`'
endsnippet

snippet impf "Import a file" b
import $1 from '${2:./}${3:$1}'
endsnippet

snippet impn "Import nested" b
import { $1 } from '$2'
endsnippet

snippet impp "Import without from" b
import '$1'
endsnippet

snippet imps "Import pluralized" b
import $1 from '${2:.}/$1s'
endsnippet

snippet "\.(map|filter|forEach|reduce)" "Map with an arrow function" r
.`!p snip.rv = match.group(1)`($1 => {
	return $2
})
endsnippet

snippet "\.(map|filter|forEach|reduce)=" "Map with an arrow function inline" r
.`!p snip.rv = match.group(1)`($1 => $2)
endsnippet

snippet cl "Console.log" b
console.log($1)
endsnippet

snippet clv "Console log variable" b
console.log('$1:', $1)
endsnippet

# ==========================================
# React Snippets
#
snippet rce "React class exported" b
import React, { Component, PropTypes } from 'react'

export default class ${1:`!v expand('%:t:r')`} extends Component {
  constructor(props) {
    super(props)
  }

  static propTypes = {
    className: PropTypes.string,
    children: PropTypes.node,
  };

  render() {
    return (
      ${2:<div />}
    )
  }
}
endsnippet

snippet rfe "React function exported" b
import React from 'react'

function `!v expand('%:t:r')`($2) {
  return (
    ${3:<div>
    </div>}
  )
}

`!v expand('%:t:r')`.propTypes = {
  ${4}
}

export default `!v expand('%:t:r')`
endsnippet

snippet rpe "React pure export" b
import React, { PropTypes } from 'react'

const `!v expand('%:t:r')` = (${1:props}) => {
  return (
    <div${2}>
    </div>
  )
}

`!v expand('%:t:r')`.propTypes = {
	${3}
}

export default `!v expand('%:t:r')`
endsnippet

# ==========================================
# Prop Types Section
#

# Inline prop types
snippet pt.a "React PropTypes array" w
PropTypes.array,
endsnippet

snippet pt.ar "React PropTypes array required" w
PropTypes.array.isRequired,
endsnippet

snippet pt.b "React PropTypes boolean" w
PropTypes.bool,
endsnippet

snippet pt.br "React PropTypes boolean required" w
PropTypes.bool.isRequired,
endsnippet

snippet pt.f "React PropTypes function" w
PropTypes.func,
endsnippet

snippet pt.fr "React PropTypes function required" w
PropTypes.func.isRequired,
endsnippet

snippet pt.nu "React PropTypes number" w
PropTypes.number,
endsnippet

snippet pt.nur "React PropTypes number required" w
PropTypes.number.isRequired,
endsnippet

snippet pt.o "React PropTypes object" w
PropTypes.object,
endsnippet

snippet pt.or "React PropTypes object required" w
PropTypes.object.isRequired,
endsnippet

snippet pt.s "React PropType string" w
PropTypes.string,
endsnippet

snippet pt.sr "React PropType string required" w
PropTypes.string.isRequired,
endsnippet

snippet pt.no "React PropTypes node" w
PropTypes.node,
endsnippet

snippet pt.nor "React PropTypes node required" w
PropTypes.node.isRequired,
endsnippet

snippet pt.e "React PropTypes element" w
PropTypes.element,
endsnippet

snippet pt.er "React PropTypes element required" w
PropTypes.element.isRequired,
endsnippet

snippet pt.ao "React PropTypes arrayOf" w
PropTypes.arrayOf(${1:PropTypes.string}),
endsnippet

snippet pt.aor "React PropTypes arrayOf required" w
PropTypes.arrayOf(${1:PropTypes.string}).isRequired,
endsnippet

snippet pt.io "React PropTypes instanceOf" w
PropTypes.instanceOf(${1:PropTypes.string}),
endsnippet

snippet pt.ior "React PropTypes instanceOf required" w
PropTypes.instanceOf(${1:PropTypes.string}).isRequired,
endsnippet

snippet pt.oo "React PropTypes objectOf" w
PropTypes.objectOf(${1:PropTypes.string}),
endsnippet

snippet pt.oor "React PropTypes objectOf required" w
PropTypes.objectOf(${1:PropTypes.string}).isRequired,
endsnippet

snippet pt.one "React PropTypes oneOf" w
PropTypes.oneOf(['$1'$2]),
endsnippet

snippet pt.oner "React PropTypes oneOf required" w
PropTypes.oneOf(['$1'$2]).isRequired,
endsnippet

snippet pt.onet "React PropTypes onOfType" w
PropTypes.oneOfType([
	$1
]),
endsnippet

snippet pt.onetr "React PropTypes onOfType required" w
PropTypes.oneOfType([
	$1
]).isRequired,
endsnippet

snippet pt.sh "React PropTyes shape" w
PropTypes.shape({
	$1
}),
endsnippet

snippet pt.shr "React PropTypes shape required" w
PropTypes.shape({
	$1
}).isRequired,
endsnippet

snippet rerd "Redux reducer" b
export const ${1} = (state = ${2}, action) => {
  switch (action.type) {
    case ${3}:
      ${4}
    default:
      return state
  }
}
endsnippet

snippet reac "Redux action creator" b
export const ${1} = (${2}) => ({
  type: ${3},
  ${4:$2},
})
endsnippet

snippet reat "Redux action thunk" b
export const ${1} = (${2}) => (
  (dispatch) => {
    ${3}
  }
)
endsnippet

snippet rems "Redux map state to props"
const mapStateToProps = (state) => ({
  ${1}: state.${2:$1},
})
endsnippet

snippet remd "Redux map dispatch to props"
const mapDispatchToProps = (dispatch) => ({
  ${1}: (${2}) => {
    dispatch(${3}(${4:$2}))
  },
})
endsnippet

snippet recc "Redux connect component"
connect(
  mapStateToProps,
  mapDispatchToProps
)(${VISUAL})
endsnippet
